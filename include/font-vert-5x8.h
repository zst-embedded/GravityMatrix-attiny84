#pragma once
//https://brainy-bits.com/blogs/tutorials/scroll-text-using-the-max7219-led-dot-matrix
#include <avr/pgmspace.h>
#define CH_FONT_WIDTH (5)
PROGMEM const unsigned char CH[] = {
// offset away ' ' (decimal32) from each letter
        0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // space
        0b01011111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // !
        0b00000011, 0b00000000, 0b00000011, 0b00000000, 0b00000000, // "
        0b00010100, 0b00111110, 0b00010100, 0b00111110, 0b00010100, // #
        0b00100100, 0b01101010, 0b00101011, 0b00010010, 0b00000000, // $
        0b01100011, 0b00010011, 0b00001000, 0b01100100, 0b01100011, // %
        0b00110110, 0b01001001, 0b01010110, 0b00100000, 0b01010000, // &
        0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // '
        0b00011100, 0b00100010, 0b01000001, 0b00000000, 0b00000000, // (
        0b01000001, 0b00100010, 0b00011100, 0b00000000, 0b00000000, // )
        0b00101000, 0b00011000, 0b00001110, 0b00011000, 0b00101000, // *
        0b00001000, 0b00001000, 0b00111110, 0b00001000, 0b00001000, // +
        0b10110000, 0b01110000, 0b00000000, 0b00000000, 0b00000000, // ,
        0b00001000, 0b00001000, 0b00001000, 0b00001000, 0b00000000, // -
        0b01100000, 0b01100000, 0b00000000, 0b00000000, 0b00000000, // .
        0b01100000, 0b00011000, 0b00000110, 0b00000001, 0b00000000, // /
        0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // 0
        0b01000010, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // 1
        0b01100010, 0b01010001, 0b01001001, 0b01000110, 0b00000000, // 2
        0b00100010, 0b01000001, 0b01001001, 0b00110110, 0b00000000, // 3
        0b00011000, 0b00010100, 0b00010010, 0b01111111, 0b00000000, // 4
        0b00100111, 0b01000101, 0b01000101, 0b00111001, 0b00000000, // 5
        0b00111110, 0b01001001, 0b01001001, 0b00110000, 0b00000000, // 6
        0b01100001, 0b00010001, 0b00001001, 0b00000111, 0b00000000, // 7
        0b00110110, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // 8
        0b00000110, 0b01001001, 0b01001001, 0b00111110, 0b00000000, // 9
        0b01010000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // :
        0b10000000, 0b01010000, 0b00000000, 0b00000000, 0b00000000, // ;
        0b00010000, 0b00101000, 0b01000100, 0b00000000, 0b00000000, // <
        0b00010100, 0b00010100, 0b00010100, 0b00000000, 0b00000000, // =
        0b01000100, 0b00101000, 0b00010000, 0b00000000, 0b00000000, // >
        0b00000010, 0b01011001, 0b00001001, 0b00000110, 0b00000000, // ?
        0b00111110, 0b01001001, 0b01010101, 0b01011101, 0b00001110, // @
        0b01111110, 0b00010001, 0b00010001, 0b01111110, 0b00000000, // A
        0b01111111, 0b01001001, 0b01001001, 0b00110110, 0b00000000, // B
        0b00111110, 0b01000001, 0b01000001, 0b00100010, 0b00000000, // C
        0b01111111, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // D
        0b01111111, 0b01001001, 0b01001001, 0b01000001, 0b00000000, // E
        0b01111111, 0b00001001, 0b00001001, 0b00000001, 0b00000000, // F
        0b00111110, 0b01000001, 0b01001001, 0b01111010, 0b00000000, // G
        0b01111111, 0b00001000, 0b00001000, 0b01111111, 0b00000000, // H
        0b01000001, 0b01111111, 0b01000001, 0b00000000, 0b00000000, // I
        0b00110000, 0b01000000, 0b01000001, 0b00111111, 0b00000000, // J
        0b01111111, 0b00001000, 0b00010100, 0b01100011, 0b00000000, // K
        0b01111111, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // L
        0b01111111, 0b00000010, 0b00001100, 0b00000010, 0b01111111, // M
        0b01111111, 0b00000100, 0b00001000, 0b00010000, 0b01111111, // N
        0b00111110, 0b01000001, 0b01000001, 0b00111110, 0b00000000, // O
        0b01111111, 0b00001001, 0b00001001, 0b00000110, 0b00000000, // P
        0b00111110, 0b01000001, 0b01000001, 0b10111110, 0b00000000, // Q
        0b01111111, 0b00001001, 0b00001001, 0b01110110, 0b00000000, // R
        0b01000110, 0b01001001, 0b01001001, 0b00110010, 0b00000000, // S
        0b00000001, 0b00000001, 0b01111111, 0b00000001, 0b00000001, // T
        0b00111111, 0b01000000, 0b01000000, 0b00111111, 0b00000000, // U
        0b00001111, 0b00110000, 0b01000000, 0b00110000, 0b00001111, // V
        0b00111111, 0b01000000, 0b00111000, 0b01000000, 0b00111111, // W
        0b01100011, 0b00010100, 0b00001000, 0b00010100, 0b01100011, // X
        0b00000111, 0b00001000, 0b01110000, 0b00001000, 0b00000111, // Y
        0b01100001, 0b01010001, 0b01001001, 0b01000111, 0b00000000, // Z
        0b01111111, 0b01000001, 0b00000000, 0b00000000, 0b00000000, // [
        0b00000001, 0b00000110, 0b00011000, 0b01100000, 0b00000000, // \ backslash
        0b01000001, 0b01111111, 0b00000000, 0b00000000, 0b00000000, // ]
        0b00000010, 0b00000001, 0b00000010, 0b00000000, 0b00000000, // hat
        0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b00000000, // _
        0b00000001, 0b00000010, 0b00000000, 0b00000000, 0b00000000, // `
        0b00100000, 0b01010100, 0b01010100, 0b01111000, 0b00000000, // a
        0b01111111, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // b
        0b00111000, 0b01000100, 0b01000100, 0b00101000, 0b00000000, // c
        0b00111000, 0b01000100, 0b01000100, 0b01111111, 0b00000000, // d
        0b00111000, 0b01010100, 0b01010100, 0b00011000, 0b00000000, // e
        0b00000100, 0b01111110, 0b00000101, 0b00000000, 0b00000000, // f
        0b10011000, 0b10100100, 0b10100100, 0b01111000, 0b00000000, // g
        0b01111111, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // h
        0b01000100, 0b01111101, 0b01000000, 0b00000000, 0b00000000, // i
        0b01000000, 0b10000000, 0b10000100, 0b01111101, 0b00000000, // j
        0b01111111, 0b00010000, 0b00101000, 0b01000100, 0b00000000, // k
        0b01000001, 0b01111111, 0b01000000, 0b00000000, 0b00000000, // l
        0b01111100, 0b00000100, 0b01111100, 0b00000100, 0b01111000, // m
        0b01111100, 0b00000100, 0b00000100, 0b01111000, 0b00000000, // n
        0b00111000, 0b01000100, 0b01000100, 0b00111000, 0b00000000, // o
        0b11111100, 0b00100100, 0b00100100, 0b00011000, 0b00000000, // p
        0b00011000, 0b00100100, 0b00100100, 0b11111100, 0b00000000, // q
        0b01111100, 0b00001000, 0b00000100, 0b00000100, 0b00000000, // r
        0b01001000, 0b01010100, 0b01010100, 0b00100100, 0b00000000, // s
        0b00000100, 0b00111111, 0b01000100, 0b00000000, 0b00000000, // t
        0b00111100, 0b01000000, 0b01000000, 0b01111100, 0b00000000, // u
        0b00011100, 0b00100000, 0b01000000, 0b00100000, 0b00011100, // v
        0b00111100, 0b01000000, 0b00111100, 0b01000000, 0b00111100, // w
        0b01000100, 0b00101000, 0b00010000, 0b00101000, 0b01000100, // x
        0b10011100, 0b10100000, 0b10100000, 0b01111100, 0b00000000, // y
        0b01100100, 0b01010100, 0b01001100, 0b00000000, 0b00000000, // z
        0b00001000, 0b00110110, 0b01000001, 0b00000000, 0b00000000, // {
        0b01111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // |
        0b01000001, 0b00110110, 0b00001000, 0b00000000, 0b00000000, // }
        0b00001000, 0b00000100, 0b00001000, 0b00000100, 0b00000000, // ~
};

inline uint8_t getFont(char character, uint8_t col) {
    if ('\0' == character || col >= CH_FONT_WIDTH || col < 0)
        return 0;
    else
        return pgm_read_byte_near(CH + (character - ' ') * CH_FONT_WIDTH + col);
}
